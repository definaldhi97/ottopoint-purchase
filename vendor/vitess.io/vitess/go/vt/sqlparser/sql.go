// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const REAL = 57500
const DOUBLE = 57501
const FLOAT_TYPE = 57502
const DECIMAL = 57503
const NUMERIC = 57504
const TIME = 57505
const TIMESTAMP = 57506
const DATETIME = 57507
const YEAR = 57508
const CHAR = 57509
const VARCHAR = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const COLLATION = 57539
const DATABASES = 57540
const SCHEMAS = 57541
const TABLES = 57542
const VITESS_KEYSPACES = 57543
const VITESS_SHARDS = 57544
const VITESS_TABLETS = 57545
const VSCHEMA = 57546
const VSCHEMA_TABLES = 57547
const VITESS_TARGET = 57548
const FULL = 57549
const PROCESSLIST = 57550
const COLUMNS = 57551
const FIELDS = 57552
const ENGINES = 57553
const PLUGINS = 57554
const NAMES = 57555
const CHARSET = 57556
const GLOBAL = 57557
const SESSION = 57558
const ISOLATION = 57559
const LEVEL = 57560
const READ = 57561
const WRITE = 57562
const ONLY = 57563
const REPEATABLE = 57564
const COMMITTED = 57565
const UNCOMMITTED = 57566
const SERIALIZABLE = 57567
const CURRENT_TIMESTAMP = 57568
const DATABASE = 57569
const CURRENT_DATE = 57570
const CURRENT_TIME = 57571
const LOCALTIME = 57572
const LOCALTIMESTAMP = 57573
const UTC_DATE = 57574
const UTC_TIME = 57575
const UTC_TIMESTAMP = 57576
const REPLACE = 57577
const CONVERT = 57578
const CAST = 57579
const SUBSTR = 57580
const SUBSTRING = 57581
const GROUP_CONCAT = 57582
const SEPARATOR = 57583
const TIMESTAMPADD = 57584
const TIMESTAMPDIFF = 57585
const MATCH = 57586
const AGAINST = 57587
const BOOLEAN = 57588
const LANGUAGE = 57589
const WITH = 57590
const QUERY = 57591
const EXPANSION = 57592
const UNUSED = 57593

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 299,
	160, 299,
	-2, 289,
	-1, 270,
	112, 639,
	-2, 635,
	-1, 271,
	112, 640,
	-2, 636,
	-1, 339,
	82, 814,
	-2, 63,
	-1, 340,
	82, 770,
	-2, 64,
	-1, 345,
	82, 749,
	-2, 601,
	-1, 347,
	82, 791,
	-2, 603,
	-1, 617,
	1, 351,
	5, 351,
	12, 351,
	13, 351,
	14, 351,
	15, 351,
	17, 351,
	19, 351,
	30, 351,
	31, 351,
	42, 351,
	43, 351,
	44, 351,
	45, 351,
	46, 351,
	48, 351,
	49, 351,
	52, 351,
	53, 351,
	55, 351,
	56, 351,
	269, 351,
	-2, 369,
	-1, 620,
	53, 44,
	55, 44,
	-2, 48,
	-1, 765,
	112, 642,
	-2, 638,
	-1, 992,
	5, 30,
	-2, 436,
	-1, 1022,
	5, 29,
	-2, 575,
	-1, 1264,
	5, 30,
	-2, 576,
	-1, 1316,
	5, 29,
	-2, 578,
	-1, 1393,
	5, 30,
	-2, 579,
}

const yyPrivate = 57344

const yyLast = 12703

var yyAct = [...]int{

	271, 1427, 1417, 1227, 1381, 1116, 878, 1284, 573, 1025,
	1297, 275, 1328, 288, 1043, 1201, 1167, 851, 301, 907,
	1164, 572, 3, 249, 1026, 1168, 877, 921, 887, 1174,
	1070, 57, 81, 874, 790, 1180, 210, 716, 344, 210,
	1139, 957, 800, 1096, 984, 838, 730, 849, 1087, 633,
	613, 474, 853, 818, 767, 511, 1049, 505, 445, 891,
	632, 797, 333, 799, 831, 338, 622, 210, 81, 917,
	273, 258, 210, 248, 210, 517, 525, 56, 588, 1420,
	1404, 313, 330, 319, 320, 317, 318, 316, 315, 314,
	1415, 614, 1391, 335, 940, 1412, 1228, 321, 322, 1403,
	302, 51, 901, 240, 1156, 1256, 262, 450, 939, 1390,
	478, 61, 205, 201, 202, 203, 1195, 587, 1356, 538,
	537, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 1196, 1197, 549, 869, 870, 944, 63, 64, 65,
	66, 67, 634, 499, 635, 938, 868, 246, 241, 242,
	243, 244, 51, 1058, 247, 495, 1057, 245, 1078, 1059,
	254, 900, 1287, 496, 493, 494, 197, 908, 199, 1303,
	1247, 1245, 239, 463, 488, 489, 480, 1119, 482, 823,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 1118, 705, 549, 935, 932, 933, 210, 931,
	703, 210, 498, 1414, 1411, 1382, 1115, 210, 479, 481,
	832, 1140, 1374, 210, 892, 1329, 81, 1435, 81, 81,
	464, 81, 81, 1112, 81, 1431, 81, 704, 1331, 1114,
	942, 945, 452, 985, 204, 81, 199, 1337, 706, 1120,
	709, 696, 1190, 1044, 1046, 894, 894, 277, 1142, 1189,
	1188, 448, 455, 212, 200, 951, 1001, 1363, 950, 998,
	561, 562, 198, 1267, 1126, 81, 937, 1054, 1011, 483,
	484, 978, 485, 486, 1071, 487, 514, 490, 739, 1103,
	628, 1144, 529, 1148, 513, 1143, 500, 1141, 936, 460,
	470, 1357, 1146, 1213, 875, 539, 1330, 477, 549, 908,
	736, 1145, 542, 543, 544, 545, 546, 539, 1101, 549,
	549, 864, 959, 446, 1147, 1149, 475, 476, 475, 475,
	1045, 475, 475, 1389, 475, 1113, 475, 1111, 210, 210,
	210, 1429, 941, 70, 1430, 475, 1428, 81, 1338, 1336,
	522, 893, 893, 81, 1214, 1372, 444, 943, 524, 501,
	502, 1346, 457, 1178, 458, 51, 524, 459, 561, 562,
	731, 561, 562, 636, 1158, 819, 819, 515, 1008, 71,
	558, 698, 1076, 560, 1377, 1102, 612, 466, 467, 468,
	1107, 1104, 1097, 1105, 1100, 341, 897, 519, 1098, 1099,
	958, 1395, 898, 591, 593, 1293, 597, 599, 626, 602,
	1436, 571, 1106, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 621, 586, 589, 589, 589, 595, 589, 589,
	595, 589, 603, 604, 605, 606, 607, 608, 503, 618,
	630, 300, 590, 592, 594, 596, 598, 600, 601, 1437,
	196, 732, 54, 894, 774, 210, 742, 743, 1397, 996,
	81, 995, 770, 523, 522, 210, 210, 81, 772, 773,
	771, 210, 1292, 79, 210, 997, 1091, 210, 523, 522,
	524, 210, 446, 81, 81, 975, 976, 977, 81, 81,
	81, 210, 81, 81, 1090, 524, 523, 522, 22, 81,
	81, 1079, 1373, 1160, 523, 522, 757, 759, 760, 343,
	1310, 695, 758, 524, 1290, 327, 328, 451, 702, 718,
	791, 524, 792, 1123, 1088, 523, 522, 81, 1334, 1413,
	559, 210, 1399, 504, 719, 720, 1060, 81, 1061, 721,
	722, 723, 524, 725, 726, 1334, 1385, 744, 1370, 893,
	727, 728, 1334, 504, 890, 888, 710, 889, 253, 1230,
	475, 768, 886, 892, 738, 1334, 1364, 475, 1071, 540,
	541, 542, 543, 544, 545, 546, 539, 763, 765, 549,
	1066, 81, 793, 475, 475, 715, 617, 714, 475, 475,
	475, 699, 475, 475, 453, 454, 697, 746, 694, 475,
	475, 737, 809, 812, 1334, 1333, 504, 804, 820, 1282,
	1281, 1269, 504, 761, 81, 81, 1266, 504, 523, 522,
	472, 210, 1220, 1219, 268, 1216, 1217, 1216, 1215, 210,
	210, 990, 504, 210, 210, 524, 465, 210, 210, 210,
	81, 624, 794, 795, 835, 504, 24, 802, 504, 624,
	805, 806, 1343, 81, 811, 814, 815, 343, 1342, 343,
	343, 1210, 343, 343, 341, 343, 895, 343, 1050, 816,
	1020, 51, 643, 642, 1021, 1177, 343, 718, 828, 827,
	859, 829, 830, 625, 861, 627, 575, 909, 910, 911,
	24, 625, 1050, 623, 54, 857, 1165, 834, 802, 1177,
	862, 58, 866, 1262, 745, 865, 527, 210, 81, 504,
	81, 835, 882, 1345, 81, 81, 210, 210, 1315, 210,
	210, 835, 835, 210, 81, 1129, 858, 1218, 623, 850,
	1062, 923, 24, 618, 867, 1177, 1014, 618, 54, 54,
	210, 990, 210, 210, 1013, 210, 538, 537, 547, 548,
	540, 541, 542, 543, 544, 545, 546, 539, 990, 927,
	549, 929, 801, 803, 623, 903, 904, 905, 906, 990,
	919, 920, 629, 740, 1405, 955, 708, 1299, 343, 902,
	54, 914, 915, 916, 638, 1274, 922, 966, 765, 1206,
	769, 1065, 291, 290, 293, 294, 295, 296, 1181, 1182,
	768, 292, 297, 255, 918, 913, 967, 912, 475, 1117,
	475, 925, 968, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 475, 974, 549, 840, 843, 844,
	845, 841, 1422, 842, 846, 1418, 980, 1181, 1182, 1208,
	1184, 1165, 1092, 734, 712, 752, 210, 210, 210, 210,
	210, 54, 1187, 1186, 1037, 1035, 1027, 764, 210, 1038,
	1036, 210, 1034, 1022, 1039, 210, 844, 845, 1033, 210,
	259, 260, 989, 1409, 1402, 979, 617, 1125, 963, 1407,
	617, 1007, 804, 973, 617, 518, 972, 1083, 81, 506,
	1005, 343, 641, 473, 1063, 1075, 1028, 1379, 343, 1031,
	516, 507, 1040, 563, 564, 565, 566, 567, 568, 569,
	570, 1378, 1313, 1073, 343, 343, 1051, 1048, 1067, 343,
	343, 343, 1260, 343, 343, 1295, 1052, 1055, 1053, 928,
	343, 343, 1072, 1080, 1081, 711, 81, 81, 1029, 1030,
	264, 1032, 1023, 1024, 848, 518, 618, 618, 618, 618,
	618, 1082, 250, 1084, 1085, 1086, 971, 341, 748, 1068,
	1069, 850, 58, 1047, 970, 81, 256, 257, 527, 618,
	879, 343, 1089, 1350, 251, 840, 843, 844, 845, 841,
	210, 842, 846, 987, 1349, 1301, 1108, 988, 1094, 81,
	1050, 497, 1424, 1423, 992, 993, 994, 1002, 999, 729,
	520, 1000, 1424, 1360, 1003, 1004, 1288, 735, 60, 62,
	1010, 55, 796, 1122, 1012, 1, 1121, 1015, 1016, 1017,
	1018, 1416, 1229, 1296, 934, 1380, 1327, 1200, 821, 769,
	885, 876, 69, 443, 81, 81, 1133, 475, 68, 1042,
	1166, 1150, 1027, 1138, 1095, 825, 826, 1157, 1151, 1371,
	1169, 1132, 884, 883, 1335, 1171, 1286, 896, 81, 966,
	765, 1077, 899, 1207, 1074, 475, 1376, 764, 649, 647,
	648, 343, 646, 81, 651, 81, 81, 1185, 650, 645,
	224, 1199, 336, 847, 343, 637, 924, 1191, 521, 72,
	1110, 1192, 1176, 617, 617, 617, 617, 617, 1109, 1198,
	930, 491, 492, 210, 226, 1203, 557, 969, 617, 1204,
	1205, 1056, 342, 1172, 741, 510, 617, 1348, 1194, 1300,
	210, 1006, 584, 817, 1211, 1212, 81, 276, 756, 81,
	81, 210, 1170, 289, 51, 286, 287, 81, 747, 343,
	210, 343, 1019, 531, 274, 946, 947, 266, 616, 609,
	839, 837, 836, 331, 1183, 343, 766, 1179, 615, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 1234, 1128, 1255, 1355, 751, 1137,
	26, 343, 1243, 59, 261, 19, 18, 1236, 17, 20,
	16, 508, 512, 15, 14, 1235, 461, 1261, 30, 1027,
	21, 13, 12, 11, 10, 879, 9, 8, 530, 81,
	1222, 7, 1271, 6, 824, 1063, 5, 81, 1270, 4,
	252, 23, 1223, 2, 1225, 0, 1280, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 81,
	618, 0, 0, 574, 0, 1289, 0, 1291, 0, 0,
	0, 0, 585, 1240, 1241, 0, 1242, 0, 0, 1244,
	0, 1246, 0, 0, 0, 0, 0, 1254, 0, 0,
	0, 1302, 0, 0, 0, 0, 821, 81, 81, 0,
	81, 0, 0, 1294, 0, 81, 0, 81, 81, 81,
	210, 1169, 1322, 81, 1323, 1324, 1325, 1316, 1314, 1276,
	1277, 1278, 0, 0, 1321, 0, 1131, 1326, 1332, 0,
	81, 0, 1339, 0, 0, 1283, 0, 1347, 0, 343,
	0, 0, 1237, 0, 0, 0, 0, 0, 0, 1239,
	0, 0, 475, 1340, 0, 1341, 509, 0, 0, 1161,
	1248, 1249, 1361, 0, 1169, 81, 0, 0, 0, 1362,
	1369, 1368, 0, 0, 0, 0, 81, 81, 0, 0,
	1263, 1264, 1265, 1384, 1268, 0, 1383, 1093, 343, 1387,
	0, 0, 208, 1170, 81, 238, 1317, 619, 0, 0,
	1392, 1279, 1027, 0, 0, 210, 0, 617, 0, 0,
	879, 0, 879, 81, 0, 0, 343, 981, 982, 983,
	265, 1401, 0, 334, 0, 0, 1344, 0, 208, 0,
	208, 0, 0, 207, 1406, 1408, 81, 0, 0, 0,
	343, 0, 0, 1410, 0, 0, 1170, 0, 51, 1421,
	1259, 0, 0, 0, 0, 0, 1432, 0, 733, 0,
	0, 0, 0, 0, 332, 1309, 0, 0, 0, 447,
	0, 449, 0, 343, 1131, 0, 0, 0, 0, 0,
	0, 0, 821, 754, 755, 1173, 1175, 0, 538, 537,
	547, 548, 540, 541, 542, 543, 544, 545, 546, 539,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 1175,
	0, 0, 0, 0, 1351, 1352, 1353, 1354, 0, 0,
	0, 1358, 1359, 0, 343, 0, 343, 1202, 0, 0,
	0, 0, 0, 1365, 1366, 1367, 574, 0, 0, 807,
	808, 0, 0, 0, 0, 1419, 879, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 208, 0, 0,
	0, 0, 0, 208, 0, 1388, 0, 0, 0, 208,
	0, 0, 1393, 0, 1258, 0, 1298, 1226, 0, 0,
	1231, 1232, 0, 0, 0, 0, 0, 221, 343, 0,
	1398, 0, 0, 0, 0, 456, 0, 873, 462, 0,
	0, 0, 0, 0, 469, 0, 0, 0, 0, 0,
	471, 234, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 0, 0, 549, 0, 0, 0,
	1135, 1136, 0, 0, 0, 1433, 1434, 0, 0, 821,
	0, 0, 0, 1152, 1153, 0, 1154, 1155, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1162, 1163,
	343, 0, 213, 0, 0, 0, 0, 0, 1285, 216,
	0, 1253, 0, 0, 0, 0, 0, 225, 220, 0,
	0, 0, 0, 343, 208, 208, 208, 0, 0, 0,
	343, 0, 0, 1298, 879, 0, 0, 0, 964, 965,
	0, 512, 0, 0, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	1209, 0, 0, 0, 0, 611, 0, 620, 1318, 1319,
	0, 1320, 0, 0, 0, 0, 1285, 0, 1285, 1285,
	1285, 214, 0, 0, 1202, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 0, 0, 549,
	0, 1285, 0, 991, 0, 0, 0, 0, 227, 217,
	218, 0, 228, 229, 230, 232, 0, 231, 237, 1238,
	1009, 0, 219, 222, 0, 215, 236, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 1375, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 343, 343, 0,
	0, 208, 208, 0, 0, 0, 0, 208, 0, 0,
	208, 0, 821, 208, 0, 1394, 0, 717, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 644, 0, 1400, 0, 0, 0, 0, 0,
	0, 0, 700, 701, 0, 0, 0, 0, 707, 0,
	0, 332, 0, 0, 713, 0, 0, 1285, 0, 0,
	1252, 0, 0, 0, 0, 0, 0, 208, 724, 0,
	0, 0, 0, 0, 0, 0, 717, 24, 25, 52,
	27, 28, 0, 0, 0, 1304, 1305, 1306, 1307, 1308,
	0, 0, 0, 1311, 1312, 0, 43, 0, 0, 0,
	0, 29, 48, 49, 0, 0, 0, 0, 753, 0,
	1124, 0, 0, 0, 0, 0, 0, 0, 265, 0,
	0, 38, 0, 265, 265, 54, 0, 265, 265, 265,
	0, 0, 0, 822, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 0, 1251, 549, 0,
	0, 0, 265, 265, 265, 265, 0, 208, 0, 1159,
	0, 0, 0, 0, 0, 208, 855, 0, 0, 208,
	208, 0, 0, 208, 863, 717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 32, 34, 33,
	36, 0, 50, 0, 0, 0, 0, 0, 833, 0,
	0, 1193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 37, 44, 45, 0, 0, 46, 47,
	35, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 39, 40, 549, 41, 42, 0, 0,
	1134, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 208, 1425, 208, 208, 0, 0, 208,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 666, 0, 549, 0, 208, 1250, 960, 961,
	0, 208, 0, 0, 926, 0, 717, 0, 0, 0,
	0, 0, 0, 948, 949, 0, 952, 953, 265, 0,
	954, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 1257, 0, 549, 0, 0, 0, 956, 0, 0,
	0, 574, 962, 53, 0, 0, 0, 0, 0, 1272,
	0, 0, 1273, 0, 0, 1275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 986, 0, 0, 0,
	654, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 265, 0, 549, 538, 537, 547, 548,
	540, 541, 542, 543, 544, 545, 546, 539, 0, 0,
	549, 822, 208, 208, 208, 208, 208, 667, 0, 0,
	0, 0, 0, 0, 1041, 0, 0, 208, 0, 0,
	0, 855, 0, 0, 0, 208, 0, 0, 0, 680,
	683, 684, 685, 686, 687, 688, 0, 689, 690, 691,
	692, 693, 668, 669, 670, 671, 652, 653, 681, 0,
	655, 0, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 672, 673, 674, 675, 676, 677, 678, 679,
	533, 0, 536, 0, 0, 0, 0, 0, 550, 551,
	552, 553, 554, 555, 556, 0, 534, 535, 532, 538,
	537, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 0, 0, 549, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 0, 0, 549, 0,
	1386, 574, 0, 0, 0, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1127, 717, 0,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 526, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 208,
	528, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 523, 522, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	524, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	1221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1224, 0, 0,
	0, 0, 109, 0, 0, 0, 211, 0, 1233, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 822, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 0, 0, 855, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 89, 121, 192, 148, 106, 179,
	0, 431, 420, 0, 391, 434, 369, 383, 442, 384,
	385, 413, 355, 399, 139, 381, 0, 372, 350, 378,
	351, 370, 393, 103, 396, 368, 422, 402, 433, 120,
	440, 122, 407, 0, 160, 131, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 80, 0, 880, 881, 822, 0, 0,
	0, 0, 96, 0, 409, 430, 380, 410, 412, 349,
	408, 208, 353, 356, 441, 426, 375, 376, 1064, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 1396, 374, 416, 0, 348, 109, 419, 425,
	389, 211, 429, 387, 386, 432, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 423, 371,
	379, 99, 377, 153, 141, 176, 404, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 352, 0, 161, 178, 195,
	94, 367, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 363,
	366, 361, 362, 400, 401, 437, 438, 439, 417, 358,
	0, 364, 365, 0, 421, 427, 428, 403, 82, 89,
	121, 192, 148, 106, 179, 431, 420, 0, 391, 434,
	369, 383, 442, 384, 385, 413, 355, 399, 139, 381,
	0, 372, 350, 378, 351, 370, 393, 103, 396, 368,
	422, 402, 433, 120, 440, 122, 407, 0, 160, 131,
	0, 0, 395, 424, 397, 418, 390, 414, 360, 406,
	435, 382, 411, 436, 0, 0, 0, 80, 0, 880,
	881, 0, 0, 0, 0, 0, 96, 0, 409, 430,
	380, 410, 412, 349, 408, 0, 353, 356, 441, 426,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 394,
	398, 415, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 54, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 405, 0, 0,
	0, 357, 354, 0, 0, 392, 0, 0, 0, 359,
	0, 374, 416, 0, 348, 109, 419, 425, 389, 211,
	429, 387, 386, 432, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 423, 371, 379, 99,
	377, 153, 141, 176, 404, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 352, 0, 161, 178, 195, 94, 367,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 363, 366, 361,
	362, 400, 401, 437, 438, 439, 417, 358, 0, 364,
	365, 0, 421, 427, 428, 403, 82, 89, 121, 192,
	148, 106, 179, 431, 420, 0, 391, 434, 369, 383,
	442, 384, 385, 413, 355, 399, 139, 381, 0, 372,
	350, 378, 351, 370, 393, 103, 396, 368, 422, 402,
	433, 120, 440, 122, 407, 0, 160, 131, 0, 0,
	395, 424, 397, 418, 390, 414, 360, 406, 435, 382,
	411, 436, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 409, 430, 380, 410,
	412, 349, 408, 0, 353, 356, 441, 426, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 394, 398, 415,
	388, 0, 0, 0, 0, 0, 0, 1130, 0, 373,
	0, 405, 0, 0, 0, 357, 354, 0, 0, 392,
	0, 0, 0, 359, 0, 374, 416, 0, 348, 109,
	419, 425, 389, 211, 429, 387, 386, 432, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	423, 371, 379, 99, 377, 153, 141, 176, 404, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 352, 0, 161,
	178, 195, 94, 367, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 363, 366, 361, 362, 400, 401, 437, 438, 439,
	417, 358, 0, 364, 365, 0, 421, 427, 428, 403,
	82, 89, 121, 192, 148, 106, 179, 431, 420, 0,
	391, 434, 369, 383, 442, 384, 385, 413, 355, 399,
	139, 381, 0, 372, 350, 378, 351, 370, 393, 103,
	396, 368, 422, 402, 433, 120, 440, 122, 407, 0,
	160, 131, 0, 0, 395, 424, 397, 418, 390, 414,
	360, 406, 435, 382, 411, 436, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	409, 430, 380, 410, 412, 349, 408, 0, 353, 356,
	441, 426, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 394, 398, 415, 388, 0, 0, 0, 0, 0,
	0, 864, 0, 373, 0, 405, 0, 0, 0, 357,
	354, 0, 0, 392, 0, 0, 0, 359, 0, 374,
	416, 0, 348, 109, 419, 425, 389, 211, 429, 387,
	386, 432, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 423, 371, 379, 99, 377, 153,
	141, 176, 404, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 352, 0, 161, 178, 195, 94, 367, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 82, 89, 121, 192, 148, 106,
	179, 431, 420, 0, 391, 434, 369, 383, 442, 384,
	385, 413, 355, 399, 139, 381, 0, 372, 350, 378,
	351, 370, 393, 103, 396, 368, 422, 402, 433, 120,
	440, 122, 407, 0, 160, 131, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 441, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 762, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 109, 419, 425,
	389, 211, 429, 387, 386, 432, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 423, 371,
	379, 99, 377, 153, 141, 176, 404, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 352, 0, 161, 178, 195,
	94, 367, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 363,
	366, 361, 362, 400, 401, 437, 438, 439, 417, 358,
	0, 364, 365, 0, 421, 427, 428, 403, 82, 89,
	121, 192, 148, 106, 179, 431, 420, 0, 391, 434,
	369, 383, 442, 384, 385, 413, 355, 399, 139, 381,
	0, 372, 350, 378, 351, 370, 393, 103, 396, 368,
	422, 402, 433, 120, 440, 122, 407, 0, 160, 131,
	0, 0, 395, 424, 397, 418, 390, 414, 360, 406,
	435, 382, 411, 436, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 409, 430,
	380, 410, 412, 349, 408, 0, 353, 356, 441, 426,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 394,
	398, 415, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 431,
	420, 0, 391, 434, 369, 383, 442, 384, 385, 413,
	355, 399, 139, 381, 0, 372, 350, 378, 351, 370,
	393, 103, 396, 368, 422, 402, 433, 120, 440, 122,
	407, 0, 160, 131, 0, 0, 395, 424, 397, 418,
	390, 414, 360, 406, 435, 382, 411, 436, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 409, 430, 380, 410, 412, 349, 408, 0,
	353, 356, 441, 426, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 394, 398, 415, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 405, 0, 0,
	0, 357, 354, 0, 0, 392, 0, 0, 0, 359,
	0, 374, 416, 0, 348, 109, 419, 425, 389, 211,
	429, 387, 386, 432, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 423, 371, 379, 99,
	377, 153, 141, 176, 404, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 352, 0, 161, 178, 195, 94, 367,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 363, 366, 361,
	362, 400, 401, 437, 438, 439, 417, 358, 0, 364,
	365, 0, 421, 427, 428, 403, 82, 89, 121, 192,
	148, 106, 179, 431, 420, 0, 391, 434, 369, 383,
	442, 384, 385, 413, 355, 399, 139, 381, 0, 372,
	350, 378, 351, 370, 393, 103, 396, 368, 422, 402,
	433, 120, 440, 122, 407, 0, 160, 131, 0, 0,
	395, 424, 397, 418, 390, 414, 360, 406, 435, 382,
	411, 436, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 409, 430, 380, 410,
	412, 349, 408, 0, 353, 356, 441, 426, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 394, 398, 415,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 373,
	0, 405, 0, 0, 0, 357, 354, 0, 0, 392,
	0, 0, 0, 359, 0, 374, 416, 0, 348, 109,
	419, 425, 389, 211, 429, 387, 386, 432, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	423, 371, 379, 99, 377, 153, 141, 176, 404, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 346, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 352, 0, 161,
	178, 195, 94, 367, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 347, 345,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 363, 366, 361, 362, 400, 401, 437, 438, 439,
	417, 358, 0, 364, 365, 0, 421, 427, 428, 403,
	82, 89, 121, 192, 148, 106, 179, 431, 420, 0,
	391, 434, 369, 383, 442, 384, 385, 413, 355, 399,
	139, 381, 0, 372, 350, 378, 351, 370, 393, 103,
	396, 368, 422, 402, 433, 120, 440, 122, 407, 0,
	160, 131, 0, 0, 395, 424, 397, 418, 390, 414,
	360, 406, 435, 382, 411, 436, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	409, 430, 380, 410, 412, 349, 408, 0, 353, 356,
	441, 426, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 394, 398, 415, 388, 0, 0, 0, 0, 0,
	0, 0, 0, 373, 0, 405, 0, 0, 0, 357,
	354, 0, 0, 392, 0, 0, 0, 359, 0, 374,
	416, 0, 348, 109, 419, 425, 389, 211, 429, 387,
	386, 432, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 423, 371, 379, 99, 377, 153,
	141, 176, 404, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 352, 0, 161, 178, 195, 94, 367, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 82, 89, 121, 192, 148, 106,
	179, 431, 420, 0, 391, 434, 369, 383, 442, 384,
	385, 413, 355, 399, 139, 381, 0, 372, 350, 378,
	351, 370, 393, 103, 396, 368, 422, 402, 433, 120,
	440, 122, 407, 0, 160, 131, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 441, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 109, 419, 425,
	389, 211, 429, 387, 386, 432, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 423, 371,
	379, 99, 377, 153, 141, 176, 404, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	631, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 346, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 352, 0, 161, 178, 195,
	94, 367, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 347, 345, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 363,
	366, 361, 362, 400, 401, 437, 438, 439, 417, 358,
	0, 364, 365, 0, 421, 427, 428, 403, 82, 89,
	121, 192, 148, 106, 179, 431, 420, 0, 391, 434,
	369, 383, 442, 384, 385, 413, 355, 399, 139, 381,
	0, 372, 350, 378, 351, 370, 393, 103, 396, 368,
	422, 402, 433, 120, 440, 122, 407, 0, 160, 131,
	0, 0, 395, 424, 397, 418, 390, 414, 360, 406,
	435, 382, 411, 436, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 409, 430,
	380, 410, 412, 349, 408, 0, 353, 356, 441, 426,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 394,
	398, 415, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 405, 0, 0, 0, 357, 354, 0,
	0, 392, 0, 0, 0, 359, 0, 374, 416, 0,
	348, 109, 419, 425, 389, 211, 429, 387, 386, 432,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 423, 371, 379, 99, 377, 153, 141, 176,
	404, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 337, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 346, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 352,
	0, 161, 178, 195, 94, 367, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	347, 345, 340, 339, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 363, 366, 361, 362, 400, 401, 437,
	438, 439, 417, 358, 0, 364, 365, 0, 421, 427,
	428, 403, 82, 89, 121, 192, 148, 106, 179, 139,
	0, 0, 0, 0, 272, 0, 0, 0, 103, 0,
	269, 0, 0, 0, 120, 312, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 871, 0, 54, 0, 0, 270, 291,
	290, 293, 294, 295, 296, 0, 0, 96, 292, 297,
	298, 299, 872, 0, 0, 267, 284, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 325, 0, 283, 0, 0, 278,
	279, 280, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 211, 0, 0, 323,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 313, 324, 319, 320, 317, 318,
	316, 315, 314, 326, 305, 306, 307, 308, 310, 0,
	321, 322, 309, 82, 89, 121, 192, 148, 106, 179,
	139, 0, 0, 798, 0, 272, 0, 0, 0, 103,
	0, 269, 0, 0, 0, 120, 312, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 303, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 270,
	291, 290, 293, 294, 295, 296, 0, 0, 96, 292,
	297, 298, 299, 0, 0, 0, 267, 284, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	282, 263, 0, 0, 0, 325, 0, 283, 0, 0,
	278, 279, 280, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 211, 0, 0,
	323, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 313, 324, 319, 320, 317,
	318, 316, 315, 314, 326, 305, 306, 307, 308, 310,
	0, 321, 322, 309, 82, 89, 121, 192, 148, 106,
	179, 139, 0, 0, 0, 0, 272, 0, 0, 0,
	103, 0, 269, 0, 0, 0, 120, 312, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 303, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 504,
	270, 291, 290, 293, 294, 295, 296, 0, 0, 96,
	292, 297, 298, 299, 0, 0, 0, 267, 284, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 282, 0, 0, 0, 0, 325, 0, 283, 0,
	0, 278, 279, 280, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 211, 0,
	0, 323, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 313, 324, 319, 320,
	317, 318, 316, 315, 314, 326, 305, 306, 307, 308,
	310, 0, 321, 322, 309, 82, 89, 121, 192, 148,
	106, 179, 139, 0, 0, 0, 0, 272, 0, 0,
	0, 103, 0, 269, 0, 0, 0, 120, 312, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 270, 291, 290, 293, 294, 295, 296, 0, 0,
	96, 292, 297, 298, 299, 0, 0, 0, 267, 284,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 282, 263, 0, 0, 0, 325, 0, 283,
	0, 0, 278, 279, 280, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 211,
	0, 0, 323, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 313, 324, 319,
	320, 317, 318, 316, 315, 314, 326, 305, 306, 307,
	308, 310, 0, 321, 322, 309, 82, 89, 121, 192,
	148, 106, 179, 139, 0, 0, 0, 0, 272, 0,
	0, 0, 103, 0, 269, 0, 0, 0, 120, 312,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 270, 291, 813, 293, 294, 295, 296, 0,
	0, 96, 292, 297, 298, 299, 0, 0, 0, 267,
	284, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 282, 263, 0, 0, 0, 325, 0,
	283, 0, 0, 278, 279, 280, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	211, 0, 0, 323, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 313, 324,
	319, 320, 317, 318, 316, 315, 314, 326, 305, 306,
	307, 308, 310, 0, 321, 322, 309, 82, 89, 121,
	192, 148, 106, 179, 139, 0, 0, 0, 0, 272,
	0, 0, 0, 103, 0, 269, 0, 0, 0, 120,
	312, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	303, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 270, 291, 810, 293, 294, 295, 296,
	0, 0, 96, 292, 297, 298, 299, 0, 0, 0,
	267, 284, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 282, 263, 0, 0, 0, 325,
	0, 283, 0, 0, 278, 279, 280, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 211, 0, 0, 323, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 313,
	324, 319, 320, 317, 318, 316, 315, 314, 326, 305,
	306, 307, 308, 310, 24, 321, 322, 309, 82, 89,
	121, 192, 148, 106, 179, 0, 139, 0, 0, 0,
	0, 272, 0, 0, 0, 103, 0, 269, 0, 0,
	0, 120, 312, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 270, 291, 290, 293, 294,
	295, 296, 0, 0, 96, 292, 297, 298, 299, 0,
	0, 0, 267, 284, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 282, 0, 0, 0,
	0, 325, 0, 283, 0, 0, 278, 279, 280, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 211, 0, 0, 323, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 313, 324, 319, 320, 317, 318, 316, 315, 314,
	326, 305, 306, 307, 308, 310, 0, 321, 322, 309,
	82, 89, 121, 192, 148, 106, 179, 139, 0, 0,
	0, 0, 272, 0, 0, 0, 103, 0, 269, 0,
	0, 0, 120, 312, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 270, 291, 290, 293,
	294, 295, 296, 0, 0, 96, 292, 297, 298, 299,
	0, 0, 0, 267, 284, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 282, 0, 0,
	0, 0, 325, 0, 283, 0, 0, 278, 279, 280,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 211, 0, 0, 323, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 313, 324, 319, 320, 317, 318, 316, 315,
	314, 326, 305, 306, 307, 308, 310, 0, 321, 322,
	309, 82, 89, 121, 192, 148, 106, 179, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 120, 312, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 270, 291, 290,
	293, 294, 295, 296, 0, 0, 96, 292, 297, 298,
	299, 0, 0, 0, 0, 284, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 282, 0,
	0, 0, 0, 325, 0, 283, 0, 0, 278, 279,
	280, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 211, 0, 0, 323, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	1426, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 313, 324, 319, 320, 317, 318, 316,
	315, 314, 326, 305, 306, 307, 308, 310, 0, 321,
	322, 309, 82, 89, 121, 192, 148, 106, 179, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 312, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 504, 270, 291,
	290, 293, 294, 295, 296, 0, 0, 96, 292, 297,
	298, 299, 0, 0, 0, 0, 284, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 325, 0, 283, 0, 0, 278,
	279, 280, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 211, 0, 0, 323,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 313, 324, 319, 320, 317, 318,
	316, 315, 314, 326, 305, 306, 307, 308, 310, 0,
	321, 322, 309, 82, 89, 121, 192, 148, 106, 179,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 120, 312, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 303, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 270,
	291, 290, 293, 294, 295, 296, 0, 0, 96, 292,
	297, 298, 299, 0, 0, 0, 0, 284, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	282, 0, 0, 0, 0, 325, 0, 283, 0, 0,
	278, 279, 280, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 211, 0, 0,
	323, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 313, 324, 319, 320, 317,
	318, 316, 315, 314, 326, 305, 306, 307, 308, 310,
	0, 321, 322, 309, 82, 89, 121, 192, 148, 106,
	179, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 537, 547, 548,
	540, 541, 542, 543, 544, 545, 546, 539, 0, 0,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 211, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 192, 148,
	106, 179, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 76, 77, 0,
	73, 0, 0, 0, 78, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	192, 148, 106, 179, 139, 0, 0, 0, 854, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 856, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 211, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 192, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 211, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 192, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 211, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 89, 121, 192, 148, 106, 179, 139,
	0, 0, 0, 854, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 0,
	856, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 211, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 852, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 192, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 749, 0, 0, 750, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 211, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	183, 184, 165, 182, 191, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 150, 102,
	107, 101, 138, 169, 170, 100, 194, 91, 181, 88,
	92, 180, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 195, 94, 0, 157,
	166, 185, 186, 187, 188, 189, 190, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	193, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 192, 148,
	106, 179, 103, 0, 640, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 639, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	211, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 183, 184, 165, 182, 191, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	150, 102, 107, 101, 138, 169, 170, 100, 194, 91,
	181, 88, 92, 180, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 195, 94,
	0, 157, 166, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 193, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	192, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 211, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 183, 184, 165, 182, 191, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 150, 102, 107, 101, 138, 169, 170, 100,
	194, 91, 181, 88, 92, 180, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	195, 94, 0, 157, 166, 185, 186, 187, 188, 189,
	190, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 193, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 192, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 856, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 211, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 183, 184, 165, 182,
	191, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 150, 102, 107, 101, 138, 169,
	170, 100, 194, 91, 181, 88, 92, 180, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 195, 94, 0, 157, 166, 185, 186, 187,
	188, 189, 190, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 193, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 192, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	528, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 211, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 183, 184,
	165, 182, 191, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 150, 102, 107, 101,
	138, 169, 170, 100, 194, 91, 181, 88, 92, 180,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 195, 94, 0, 157, 166, 185,
	186, 187, 188, 189, 190, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 193, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 82, 89, 121, 192, 148, 106, 179,
	610, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 211,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 192,
	148, 106, 179, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 211, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 183, 184, 165, 182, 191, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 150, 102, 107, 101, 138, 169, 170, 100, 194,
	91, 181, 88, 92, 180, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 195,
	94, 0, 157, 166, 185, 186, 187, 188, 189, 190,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 193, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 192, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 206, 0, 211, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 183, 184, 165, 182, 191,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 150, 102, 107, 101, 138, 169, 170,
	100, 194, 91, 181, 88, 92, 180, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 195, 94, 0, 157, 166, 185, 186, 187, 188,
	189, 190, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 193, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 192, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 211, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 183, 184, 165,
	182, 191, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 150, 102, 107, 101, 138,
	169, 170, 100, 194, 91, 181, 88, 92, 180, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 195, 94, 0, 157, 166, 185, 186,
	187, 188, 189, 190, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 193, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 192, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 211, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 183,
	184, 165, 182, 191, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 150, 102, 107,
	101, 138, 169, 170, 100, 194, 91, 181, 88, 92,
	180, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 195, 94, 0, 157, 166,
	185, 186, 187, 188, 189, 190, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 193,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 192, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 211,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 183, 184, 165, 182, 191, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 150,
	102, 107, 101, 138, 169, 170, 100, 194, 91, 181,
	88, 92, 180, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 195, 94, 0,
	157, 166, 185, 186, 187, 188, 189, 190, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 193, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 89, 121, 192,
	148, 106, 179,
}
var yyPact = [...]int{

	1851, -1000, -192, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 937, 993, -1000, -1000, -1000, -1000, -1000, -1000,
	279, 8785, 41, 131, -10, 11708, 130, 1524, 12192, -1000,
	8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -60, -70,
	-1000, 716, -1000, -1000, -1000, -1000, -1000, 925, 948, 787,
	936, 820, -1000, 6534, 109, 109, 11466, 5530, -1000, -1000,
	256, 12192, 127, 12192, -145, 104, 104, 104, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 129, 12192, 237, -1000,
	12192, 92, 569, 92, 92, 92, 12192, -1000, 178, -1000,
	-1000, -1000, 12192, 553, 853, 3154, 53, 3154, 3154, -1000,
	3154, 3154, -1000, 3154, 15, 3154, -62, 969, -1000, -1000,
	-1000, -1000, -15, -1000, 3154, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 540, 860,
	7539, 7539, 937, -1000, 716, -1000, -1000, -1000, 854, -1000,
	-1000, 322, 979, -1000, 2361, 170, -1000, 7539, 2156, 675,
	-1000, -1000, 675, -1000, -1000, 147, -1000, -1000, 8292, 8292,
	8292, 8292, 8292, 8292, 8292, 8292, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	675, -1000, 7288, 675, 675, 675, 675, 675, 675, 675,
	675, 7539, 675, 675, 675, 675, 675, 675, 675, 675,
	675, 675, 675, 675, 675, 675, 675, 11224, 10497, 12192,
	628, 620, -1000, -1000, 168, 707, 5266, -92, -1000, -1000,
	-1000, 281, 10255, -1000, -1000, -1000, 852, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 607, 12192, -1000, 2022, -1000, 531, 3154,
	116, 529, 297, 524, 12192, 12192, 3154, 43, 70, 115,
	12192, 711, 114, 12192, 902, 782, 12192, 520, 518, -1000,
	5002, -1000, 3154, 3154, -1000, -1000, -1000, 3154, 3154, 3154,
	12192, 3154, 3154, -1000, -1000, -1000, -1000, -1000, 3154, 3154,
	-1000, 978, 349, -1000, -1000, -1000, -1000, 7539, -1000, 781,
	-1000, -1000, -1000, -1000, -1000, -1000, 988, 208, 536, 166,
	708, -1000, 422, 925, 540, 820, 10013, 792, -1000, -1000,
	12192, -1000, 7539, 7539, 428, -1000, 10981, -1000, -1000, 3946,
	259, 8292, 388, 368, 8292, 8292, 8292, 8292, 8292, 8292,
	8292, 8292, 8292, 8292, 8292, 8292, 8292, 8292, 8292, 453,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 515, -1000,
	716, 724, 724, 202, 202, 202, 202, 202, 202, 202,
	8543, 6032, 540, 582, 381, 7288, 6534, 6534, 7539, 7539,
	7036, 6785, 6534, 914, 287, 381, 12434, -1000, -1000, 8041,
	-1000, -1000, -1000, -1000, -1000, 540, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11950, 11950, 6534, 6534, 6534, 6534, 59,
	12192, -1000, 657, 923, -1000, -1000, -1000, 912, 9520, 9771,
	59, 663, 10497, 12192, -1000, -1000, 10497, 12192, 3682, 4738,
	707, -92, 669, -1000, -89, -103, 5781, 187, -1000, -1000,
	-1000, -1000, 2890, 415, 600, 318, -51, -1000, -1000, -1000,
	715, -1000, 715, 715, 715, 715, -20, -20, -20, -20,
	-1000, -1000, -1000, -1000, -1000, 743, 741, -1000, 715, 715,
	715, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 740,
	740, 740, 722, 722, 748, -1000, 12192, 3154, 896, 3154,
	-1000, 79, -1000, 11950, 11950, 12192, 12192, 138, 12192, 12192,
	699, -1000, 12192, 3154, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12192,
	300, 12192, 12192, 381, 12192, -1000, 830, 7539, 7539, 4474,
	7539, -1000, -1000, -1000, 860, -1000, 914, 935, -1000, 842,
	839, 6534, -1000, -1000, 259, 267, -1000, -1000, 407, -1000,
	-1000, -1000, -1000, 159, 675, -1000, 2171, -1000, -1000, -1000,
	-1000, 388, 8292, 8292, 8292, 87, 2171, 2053, 1986, 709,
	202, 203, 203, 191, 191, 191, 191, 191, 462, 462,
	-1000, -1000, -1000, 540, -1000, -1000, -1000, 540, 6534, 693,
	-1000, -1000, 7539, -1000, 540, 566, 566, 396, 443, 248,
	977, 566, 245, 976, 566, 566, 6534, 288, -1000, 7539,
	540, -1000, 156, -1000, 643, 679, 671, 566, 540, 566,
	566, 630, 675, -1000, 12434, 10497, 10497, 10497, 10497, 10497,
	-1000, 816, 810, -1000, 803, 802, 812, 12192, -1000, 579,
	9520, 193, 675, -1000, 10739, -1000, -1000, 968, 10497, 646,
	-1000, 646, -1000, 155, -1000, -1000, 669, -92, -83, -1000,
	-1000, -1000, -1000, 381, -1000, 469, 665, 2626, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 727, 513, -1000, 880, 218,
	217, 501, 875, -1000, -1000, -1000, 856, -1000, 304, -55,
	-1000, -1000, 431, -20, -20, -1000, -1000, 187, 847, 187,
	187, 187, 455, 455, -1000, -1000, -1000, -1000, 424, -1000,
	-1000, -1000, 406, -1000, 780, 11950, 3154, -1000, -1000, -1000,
	-1000, 251, 251, 201, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 55, 746, -1000, -1000, -1000,
	35, 20, 113, -1000, 3154, -1000, 349, -1000, 454, 7539,
	-1000, -1000, -1000, 828, 381, 381, 152, -1000, -1000, 12192,
	-1000, -1000, -1000, -1000, 704, -1000, -1000, -1000, 3418, 6534,
	-1000, 87, 2171, 1947, -1000, 8292, 8292, -1000, -1000, 566,
	6534, 381, -1000, -1000, -1000, 103, 453, 103, 8292, 8292,
	-1000, 8292, 8292, -1000, -158, 676, 283, -1000, 7539, 414,
	-1000, 4474, -1000, 8292, 8292, -1000, -1000, -1000, -1000, 779,
	12434, 675, -1000, 9278, 11950, 670, -1000, 271, 923, 736,
	778, 775, -1000, -1000, -1000, -1000, 801, -1000, 800, -1000,
	-1000, -1000, -1000, -1000, 126, 125, 118, 11950, -1000, 937,
	7539, 646, -1000, -1000, 212, -1000, -1000, -120, -109, -1000,
	-1000, -1000, 2890, -1000, 2890, 11950, 76, -1000, 501, 501,
	-1000, -1000, -1000, 725, 777, 8292, -1000, -1000, -1000, 595,
	187, 187, -1000, 236, -1000, -1000, -1000, 562, -1000, 560,
	662, 557, 12192, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12192,
	-1000, -1000, -1000, -1000, -1000, 11950, -169, 492, 11950, 11950,
	12192, -1000, 300, -1000, 381, -1000, 4210, -1000, 968, 10497,
	-1000, -1000, 540, -1000, 8292, 2171, 2171, -1000, -1000, 540,
	715, 715, -1000, 715, 722, -1000, 715, -1, 715, -2,
	540, 540, 2038, 1908, 1821, 1622, 675, -153, -1000, 381,
	7539, -1000, 1489, 1365, -1000, 885, 634, 638, -1000, -1000,
	6283, 540, 551, 151, 546, -1000, 937, 12434, 7539, -1000,
	-1000, 7539, 721, -1000, 7539, -1000, -1000, -1000, 675, 675,
	675, 546, 925, 381, -1000, -1000, -1000, -1000, 2626, -1000,
	544, -1000, 715, -1000, -1000, -1000, 11950, -47, 987, 2171,
	-1000, -1000, -1000, -1000, -1000, -20, 445, -20, 402, -1000,
	335, 3154, -1000, -1000, -1000, -1000, 889, -1000, 4210, -1000,
	-1000, 713, -1000, -1000, -1000, 962, 656, -1000, 2171, -1000,
	-1000, 112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8292, 8292, 8292, 8292, 8292, 540, 441, 381, 8292, 8292,
	874, -1000, 675, -1000, -1000, 674, 11950, 11950, -1000, 11950,
	925, -1000, 381, 381, 11950, 381, 11950, 11950, 11950, 9036,
	-1000, 162, 11950, -1000, 539, -1000, 209, -1000, -162, 187,
	-1000, 187, 592, 586, -1000, 675, 648, -1000, 269, 11950,
	960, 947, -1000, -1000, 643, 643, 643, 643, 26, -1000,
	-1000, 643, 643, 984, -1000, 675, -1000, 716, 145, -1000,
	-1000, -1000, 500, 487, 487, 487, 193, 162, -1000, 481,
	263, 433, -1000, 72, 11950, 308, 873, -1000, 859, -1000,
	-1000, -1000, -1000, -1000, 54, 4210, 2890, 480, -1000, 7539,
	7539, -1000, -1000, -1000, -1000, 540, 60, -174, -1000, -1000,
	12434, 638, 540, 11950, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 331, -1000, -1000, 12192, -1000, -1000, 389, -1000, -1000,
	467, -1000, 11950, -1000, -1000, 746, 381, 633, -1000, 825,
	-165, -187, 610, -1000, -1000, -1000, 710, -1000, -1000, 54,
	835, -169, -1000, 824, -1000, 11950, -1000, 51, -1000, -170,
	463, 49, -176, 773, 675, -188, 770, -1000, 973, 7790,
	-1000, -1000, 983, 195, 195, 643, 540, -1000, -1000, -1000,
	82, 371, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1213, 21, 488, 1211, 1210, 1209, 1206, 1203, 1201,
	1197, 1196, 1194, 1193, 1192, 1191, 1190, 1188, 1186, 1184,
	1183, 1180, 1179, 1178, 1176, 1175, 111, 1174, 1173, 1170,
	75, 1168, 71, 1167, 1166, 44, 63, 61, 42, 930,
	1165, 47, 50, 91, 1148, 35, 1147, 1144, 82, 1143,
	1142, 45, 1141, 1140, 1367, 1139, 62, 1138, 14, 56,
	1137, 1134, 1133, 1132, 70, 614, 1128, 1126, 13, 1125,
	1123, 78, 1118, 54, 8, 16, 18, 25, 1117, 247,
	11, 1113, 53, 1112, 1111, 1109, 1107, 31, 1105, 55,
	1104, 23, 57, 1103, 7, 64, 29, 20, 9, 93,
	60, 1102, 24, 65, 49, 1101, 1097, 440, 1096, 1094,
	46, 1092, 1091, 41, 173, 507, 1090, 1088, 1080, 1079,
	38, 0, 431, 317, 76, 1078, 1076, 1075, 1326, 37,
	52, 17, 1073, 103, 51, 34, 1072, 1070, 40, 1069,
	1068, 1064, 1062, 1060, 1059, 1058, 102, 1056, 1054, 1053,
	19, 33, 1052, 1051, 69, 27, 1047, 1046, 1044, 48,
	58, 1043, 1042, 59, 30, 1039, 1028, 1023, 1022, 1021,
	26, 6, 1020, 15, 1017, 12, 1016, 28, 1015, 4,
	1014, 10, 1013, 3, 1012, 5, 43, 1, 1011, 2,
	1005, 1001, 100, 179, 66, 999, 117,
}
var yyR1 = [...]int{

	0, 190, 191, 191, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 194, 194, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 136, 136, 11, 11, 11, 11, 11,
	11, 11, 185, 185, 184, 183, 183, 182, 182, 181,
	17, 166, 168, 168, 167, 167, 167, 167, 160, 139,
	139, 139, 139, 142, 142, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 145,
	145, 145, 145, 145, 145, 145, 145, 159, 159, 146,
	146, 154, 154, 155, 155, 155, 152, 152, 153, 153,
	156, 156, 156, 148, 148, 149, 149, 157, 157, 150,
	150, 150, 151, 151, 151, 158, 158, 158, 158, 158,
	147, 147, 161, 161, 176, 176, 175, 175, 175, 165,
	165, 172, 172, 172, 172, 172, 163, 163, 164, 164,
	174, 174, 173, 162, 162, 177, 177, 177, 177, 188,
	189, 187, 187, 187, 187, 187, 169, 169, 169, 170,
	170, 170, 171, 171, 171, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 180,
	178, 178, 179, 179, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 111, 111, 109,
	109, 112, 112, 110, 110, 110, 113, 113, 113, 137,
	137, 137, 21, 21, 23, 23, 24, 25, 22, 22,
	22, 22, 22, 22, 22, 16, 195, 26, 27, 27,
	28, 28, 28, 32, 32, 32, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 125, 125,
	125, 124, 124, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 57, 57, 94, 94, 96, 96, 44,
	44, 44, 44, 45, 45, 46, 46, 47, 47, 132,
	132, 131, 131, 131, 130, 130, 50, 50, 50, 52,
	51, 51, 51, 51, 53, 53, 55, 55, 54, 54,
	56, 58, 58, 58, 58, 59, 59, 39, 39, 39,
	39, 39, 39, 39, 108, 108, 61, 61, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 72, 72,
	72, 72, 72, 72, 62, 62, 62, 62, 62, 62,
	62, 35, 35, 73, 73, 73, 79, 74, 74, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 69, 69, 69, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 196, 196, 71, 70, 70, 70, 70,
	70, 70, 33, 33, 33, 33, 33, 135, 135, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 83, 83, 34, 34, 81, 81, 82, 84,
	84, 80, 80, 80, 64, 64, 64, 64, 64, 64,
	64, 64, 66, 66, 66, 85, 85, 86, 86, 87,
	87, 88, 88, 89, 90, 90, 90, 91, 91, 91,
	91, 92, 92, 92, 63, 63, 63, 63, 63, 63,
	93, 93, 93, 93, 97, 97, 75, 75, 77, 77,
	76, 78, 98, 98, 102, 99, 99, 103, 103, 103,
	103, 101, 101, 101, 127, 127, 127, 106, 106, 114,
	114, 115, 115, 107, 107, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 117, 117, 117, 118, 118,
	119, 119, 119, 126, 126, 122, 122, 123, 123, 128,
	128, 129, 129, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 192, 193, 133, 134, 134, 134,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 3, 2, 3, 3, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 2, 2,
	2, 2, 3, 3, 5, 2, 3, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -190, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -192, 8, 252, 54, -191, 269, -87, 15, -28,
	5, -26, -195, -26, -26, -26, -26, -26, -166, -168,
	54, 90, -119, 125, 72, 244, 122, 123, 129, -122,
	57, -121, 262, 135, 162, 173, 167, 194, 186, 263,
	136, 184, 187, 231, 214, 226, 66, 165, 240, 145,
	182, 178, 176, 27, 228, 199, 267, 177, 227, 121,
	138, 133, 200, 204, 232, 171, 172, 234, 198, 134,
	33, 264, 35, 153, 235, 202, 197, 193, 196, 170,
	192, 39, 206, 205, 207, 230, 189, 139, 179, 18,
	238, 148, 151, 229, 201, 203, 130, 155, 266, 236,
	175, 140, 152, 147, 239, 141, 166, 216, 233, 242,
	38, 211, 169, 132, 163, 159, 217, 190, 154, 180,
	181, 195, 168, 191, 164, 156, 149, 241, 212, 268,
	188, 185, 160, 157, 158, 218, 219, 220, 221, 222,
	223, 161, 265, 237, 183, 213, -107, 125, 221, 127,
	123, 123, 124, 125, 244, 122, 123, -54, -128, 57,
	-121, 125, 123, 108, 187, 231, 115, 215, 216, 228,
	124, 33, 229, 155, -137, 123, -109, 214, 218, 219,
	220, 223, 221, 161, 57, 233, 232, 224, -128, 164,
	-133, -133, -133, -133, -133, 217, 217, -133, -2, -91,
	17, 16, -5, -3, -192, 6, 20, 21, -32, 40,
	41, -27, -38, 99, -39, -128, -60, 74, -65, 29,
	57, -121, 23, -64, -61, -80, -78, -79, 108, 109,
	110, 97, 98, 105, 75, 111, -69, -67, -68, -70,
	59, 58, 67, 60, 61, 62, 63, 68, 69, 70,
	-122, -76, -192, 44, 45, 253, 254, 255, 256, 261,
	257, 77, 34, 243, 251, 250, 249, 247, 248, 245,
	246, 259, 260, 128, 244, 103, 252, -107, -107, 11,
	-48, -49, -54, -56, -128, -99, -136, 164, -103, 233,
	232, -123, -101, -122, -120, 231, 187, 230, 120, 73,
	22, 24, 209, 76, 108, 16, 77, 107, 253, 115,
	48, 245, 246, 243, 255, 256, 244, 215, 29, 10,
	25, 143, 21, 101, 117, 80, 81, 146, 23, 144,
	70, 19, 51, 11, 13, 14, 128, 127, 92, 124,
	46, 8, 111, 26, 89, 42, 28, 44, 90, 17,
	247, 248, 31, 261, 150, 103, 49, 36, 74, 68,
	71, 52, 72, 15, 47, 91, 118, 252, 45, 122,
	6, 258, 30, 142, 43, 123, 79, 259, 260, 126,
	69, 5, 129, 32, 9, 50, 53, 249, 250, 251,
	34, 78, 12, -167, 90, -160, 57, -54, 124, -54,
	252, -115, 128, -115, -115, 123, -54, 115, 117, 120,
	52, -18, -54, -114, 128, 57, -114, -114, -114, -54,
	112, -54, 57, 30, -134, -192, -123, 244, 57, 155,
	123, 156, 125, -134, -134, -134, -134, -134, 159, 160,
	-134, -112, -111, 226, 227, 217, 225, 12, 217, 158,
	-134, -133, -133, -193, 56, -92, 19, 31, -39, -128,
	-88, -89, -39, -87, -2, -26, 36, -30, 21, 65,
	11, -125, 73, 72, 89, -124, 22, -122, 59, 112,
	-39, -62, 92, 74, 90, 91, 76, 94, 93, 104,
	97, 98, 99, 100, 101, 102, 103, 95, 96, 107,
	82, 83, 84, 85, 86, 87, 88, -108, -192, -79,
	-192, 113, 114, -65, -65, -65, -65, -65, -65, -65,
	-65, -192, -2, -74, -39, -192, -192, -192, -192, -192,
	-192, -192, -192, -192, -83, -39, -192, -196, -71, -192,
	-196, -71, -196, -71, -196, -192, -196, -71, -196, -71,
	-196, -196, -71, -192, -192, -192, -192, -192, -192, -55,
	26, -54, -41, -42, -43, -44, -57, -79, -192, -54,
	-54, -48, -194, 55, 11, 53, -194, 55, 112, 55,
	-99, 164, -100, -104, 234, 236, 82, -127, -122, 59,
	29, 30, 56, 55, -54, -139, -142, -144, -143, -145,
	-140, -141, 184, 185, 108, 188, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 30, 145, 180, 181,
	182, 183, 200, 201, 202, 203, 204, 205, 206, 207,
	167, 186, 263, 168, 169, 170, 171, 172, 173, 175,
	176, 177, 178, 179, 57, -134, 125, 57, 74, 57,
	-54, -54, -134, 157, 157, 123, 123, -54, 55, 126,
	-48, 23, 52, -54, 57, 57, -129, -128, -120, -134,
	-134, -134, -134, -134, -54, -134, -134, -134, -134, 11,
	-110, 11, 92, -39, 52, 9, 92, 55, 18, 112,
	55, -90, 24, 25, -91, -193, -32, -66, -122, 60,
	63, -31, 43, -54, -39, -39, -72, 68, 74, 69,
	70, -124, 99, -129, -123, -120, -65, -73, -76, -79,
	64, 92, 90, 91, 76, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-135, 57, 59, 57, -64, -64, -122, -37, 21, -36,
	-38, -193, 55, -193, -2, -36, -36, -39, -39, -80,
	59, -36, -80, 59, -36, -36, -30, -81, -82, 78,
	-80, -122, -128, -193, -65, -122, -122, -36, -37, -36,
	-36, -95, 151, -54, 30, 55, -50, -52, -51, -53,
	42, 46, 48, 43, 44, 45, 49, -132, 22, -41,
	-192, -131, 151, -130, 22, -128, 59, -95, 53, -41,
	-54, -41, -56, -128, 99, -103, -100, 55, 235, 237,
	238, 52, 71, -39, -151, 107, -169, -170, -171, -123,
	59, 60, -160, -161, -162, -172, 137, -177, 130, 132,
	129, -163, 138, 124, 28, 56, -156, 68, 74, -152,
	212, -146, 54, -146, -146, -146, -146, -150, 187, -150,
	-150, -150, 54, 54, -146, -146, -146, -154, 54, -154,
	-154, -155, 54, -155, -126, 53, -54, -134, 23, -134,
	-116, 120, 117, 118, -180, 116, 209, 187, 66, 29,
	15, 253, 151, 268, 57, 152, -122, -122, -54, -54,
	120, 117, -54, -54, -54, -134, -54, -113, 90, 12,
	-128, -128, -54, 38, -39, -39, -129, -89, -92, -106,
	19, 11, 34, 34, -36, 68, 69, 70, 112, -192,
	-73, -65, -65, -65, -35, 146, 73, -193, -193, -36,
	55, -39, -193, -193, -193, 55, 53, 22, 11, 11,
	-193, 11, 11, -193, -193, -36, -84, -82, 80, -39,
	-193, 112, -193, 55, 55, -193, -193, -193, -193, -63,
	30, 34, -2, -192, -192, -98, -102, -80, -42, -43,
	-43, -42, -43, 42, 42, 42, 47, 42, 47, 42,
	-51, -128, -193, -58, 50, 127, 51, -192, -130, -59,
	12, -41, -59, -59, 112, -104, -105, 239, 236, 242,
	57, 59, 55, -171, 82, 54, 57, 28, -163, -163,
	-164, 57, -164, 28, -148, 29, 68, -153, 213, 60,
	-150, -150, -151, 30, -151, -151, -151, -159, 59, -159,
	60, 60, 52, -122, -134, -133, -186, 131, 137, 138,
	133, 57, 124, 28, 130, 132, 151, 129, -186, -117,
	-118, 126, 22, 124, 28, 151, -185, 53, 157, 157,
	126, -134, -110, 59, -39, 39, 112, -54, -40, 11,
	99, -123, -37, -35, 73, -65, -65, -193, -38, -138,
	108, 184, 145, 182, 178, 198, 189, 211, 180, 212,
	-135, -138, -65, -65, -65, -65, 262, -87, 81, -39,
	79, -123, -65, -65, -97, 52, -98, -75, -77, -76,
	-192, -2, -93, -122, -96, -122, -59, 55, 82, -46,
	-45, 52, 53, -47, 52, -45, 42, 42, 124, 124,
	124, -96, -87, -39, -59, 236, 240, 241, -170, -171,
	-174, -173, -122, -177, -164, -164, 54, -149, 52, -65,
	56, -151, -151, 57, 108, 56, 55, 56, 55, 56,
	55, -54, -133, -133, -54, -133, -122, -183, 265, -184,
	57, -122, -122, -54, -113, -59, -41, -193, -65, -193,
	-146, -146, -146, -155, -146, 172, -146, 172, -193, -193,
	19, 19, 19, 19, -192, -34, 258, -39, 55, 55,
	27, -97, 55, -193, -193, -193, 55, 112, -193, 55,
	-87, -102, -39, -39, 54, -39, -192, -192, -192, -193,
	-91, 56, 55, -146, -94, -122, -157, 209, 9, -150,
	59, -150, 60, 60, -134, 26, -182, -181, -123, 54,
	-85, 13, -150, 57, -65, -65, -65, -65, -65, -193,
	59, -65, -65, 28, -77, 34, -2, -192, -122, -122,
	-122, -91, -94, -94, -94, -94, -131, -176, -175, 53,
	134, 66, -173, 56, 55, -158, 130, 28, 129, -68,
	-151, -151, 56, 56, -192, 55, 82, -94, -86, 14,
	16, -193, -193, -193, -193, -33, 92, 265, -193, -193,
	9, -75, -2, 112, 56, -193, -193, -193, -58, -175,
	57, -165, 82, 59, 140, -122, -147, 66, 28, 28,
	-178, -179, 151, -181, -171, 56, -39, -74, -193, 263,
	49, 266, -98, -193, -122, 60, -54, 59, -193, 55,
	-122, -185, 39, 264, 267, 54, -179, 34, -183, 39,
	-94, 153, 265, 56, 154, 266, -188, -189, 52, -192,
	267, -189, 52, 10, 9, -65, 150, -187, 141, 136,
	139, 30, -187, -193, -193, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 559, 0, 316, 316, 316, 316, 316, 316,
	0, 630, 613, 0, 0, 0, 0, -2, 303, 304,
	0, 306, 307, 855, 855, 855, 855, 855, 0, 0,
	855, 0, 35, 36, 853, 1, 3, 567, 0, 0,
	320, 323, 318, 0, 613, 613, 0, 0, 65, 66,
	0, 0, 0, 839, 0, 611, 611, 611, 631, 632,
	635, 636, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 0, 0, 0, 614,
	0, 609, 0, 609, 609, 609, 0, 253, 388, 639,
	640, 839, 0, 0, 0, 856, 0, 856, 856, 266,
	856, 856, 269, 856, 0, 856, 0, 276, 278, 279,
	280, 281, 0, 285, 856, 300, 301, 290, 302, 305,
	308, 309, 310, 311, 312, 855, 855, 315, 29, 571,
	0, 0, 559, 31, 0, 316, 321, 322, 326, 324,
	325, 317, 0, 334, 338, 0, 397, 0, 402, 404,
	-2, -2, 0, 439, 440, 441, 442, 443, 0, 0,
	0, 0, 0, 0, 0, 0, 467, 468, 469, 470,
	544, 545, 546, 547, 548, 549, 550, 551, 406, 407,
	541, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 532, 0, 503, 503, 503, 503, 503, 503, 503,
	503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 388, 50, 0, 830, 595, -2,
	-2, 0, 0, 637, 638, -2, 748, -2, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 666, 667, 668, 669, 670, 671, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 0, 0, 84, 0, 82, 0, 856,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	0, 244, 0, 0, 0, 0, 0, 0, 0, 252,
	0, 254, 856, 856, 257, 857, 858, 856, 856, 856,
	0, 856, 856, 264, 265, 267, 268, 270, 856, 856,
	272, 0, 293, 291, 292, 287, 288, 0, 282, 283,
	286, 313, 314, 30, 854, 24, 0, 0, 568, 0,
	560, 561, 564, 567, 29, 323, 0, 328, 327, 319,
	0, 335, 0, 0, 0, 339, 0, 341, 342, 0,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	424, 425, 426, 427, 428, 429, 430, 403, 0, 417,
	0, 0, 0, 459, 460, 461, 462, 463, 464, 465,
	0, 330, 29, 0, 437, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 533, 0, 487, 495, 0,
	488, 496, 489, 497, 490, 0, 491, 498, 492, 499,
	493, 494, 500, 0, 0, 0, 330, 0, 0, 48,
	0, 387, 0, 345, 347, 348, 349, -2, 0, 371,
	-2, 0, 0, 0, 42, 43, 0, 0, 0, 0,
	51, 830, 53, 54, 0, 0, 0, 162, 604, 605,
	606, 602, 206, 0, 0, 150, 146, 90, 91, 92,
	139, 94, 139, 139, 139, 139, 159, 159, 159, 159,
	122, 123, 124, 125, 126, 0, 0, 109, 139, 139,
	139, 113, 129, 130, 131, 132, 133, 134, 135, 136,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 141,
	141, 141, 143, 143, 633, 68, 0, 856, 0, 856,
	80, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	247, 610, 0, 856, 250, 251, 389, 641, 642, 255,
	256, 258, 259, 260, 261, 262, 263, 271, 275, 0,
	296, 0, 0, 277, 0, 572, 0, 0, 0, 0,
	0, 563, 565, 566, 571, 32, 326, 0, 552, 0,
	0, 0, 329, 27, 398, 399, 401, 418, 0, 420,
	422, 340, 336, 0, 542, -2, 408, 409, 433, 434,
	435, 0, 0, 0, 0, 431, 413, 0, 444, 445,
	446, 447, 448, 449, 450, 451, 452, 453, 454, 455,
	458, 517, 518, 0, 456, 457, 466, 0, 0, 331,
	332, 436, 0, 590, 29, 0, 0, 0, 0, 441,
	544, 0, 441, 544, 0, 0, 0, 539, 536, 0,
	0, 541, 0, 504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 0, 0, 0, 0, 0, 0,
	376, 0, 0, 379, 0, 0, 0, 0, 370, 0,
	0, 391, 798, 372, 0, 374, 375, 395, 0, 395,
	45, 395, 47, 0, 390, 596, 52, 0, 0, 57,
	58, 597, 598, 599, 600, 0, 81, 207, 209, 212,
	213, 214, 85, 86, 87, 0, 0, 194, 0, 0,
	188, 188, 0, 186, 187, 83, 153, 151, 0, 148,
	147, 93, 0, 159, 159, 116, 117, 162, 0, 162,
	162, 162, 0, 0, 110, 111, 112, 104, 0, 105,
	106, 107, 0, 108, 0, 0, 856, 70, 612, 71,
	855, 0, 0, 625, 221, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 0, 72, 223, 225, 224,
	0, 0, 0, 245, 856, 249, 293, 274, 0, 0,
	294, 295, 284, 0, 569, 570, 0, 562, 25, 0,
	607, 608, 553, 554, 343, 419, 421, 423, 0, 330,
	410, 431, 414, 0, 411, 0, 0, 405, 471, 0,
	0, 438, -2, 474, 475, 0, 0, 0, 0, 0,
	510, 0, 0, 511, 0, 559, 0, 537, 0, 0,
	486, 0, 505, 0, 0, 506, 507, 508, 509, 584,
	0, 0, -2, 0, 0, 395, 592, 0, 346, 365,
	367, 0, 362, 377, 378, 380, 0, 382, 0, 384,
	385, 350, 352, 353, 0, 0, 0, 0, 373, 559,
	0, 395, 40, 41, 0, 55, 56, 0, 0, 62,
	163, 164, 0, 210, 0, 0, 0, 181, 188, 188,
	184, 189, 185, 0, 155, 0, 152, 89, 149, 0,
	162, 162, 118, 0, 119, 120, 121, 0, 137, 0,
	0, 0, 0, 634, 69, 215, 855, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 855, 0,
	855, 626, 627, 628, 629, 0, 75, 0, 0, 0,
	0, 248, 296, 297, 298, 573, 0, 26, 395, 0,
	337, 543, 0, 412, 0, 432, 415, 472, 333, 0,
	139, 139, 522, 139, 143, 525, 139, 527, 139, 530,
	0, 0, 0, 0, 0, 0, 0, 534, 485, 540,
	0, 542, 0, 0, 33, 0, 584, 574, 586, 588,
	0, 29, 0, 580, 0, 357, 559, 0, 0, 359,
	366, 0, 0, 360, 0, 361, 381, 383, 0, 0,
	0, 0, 567, 396, 39, 59, 60, 61, 208, 211,
	0, 190, 139, 193, 182, 183, 0, 157, 0, 154,
	140, 114, 115, 160, 161, 159, 0, 159, 0, 144,
	0, 856, 216, 217, 218, 219, 0, 222, 0, 73,
	74, 0, 227, 246, 273, 555, 344, 473, 416, 476,
	519, 159, 523, 524, 526, 528, 529, 531, 478, 477,
	0, 0, 0, 0, 0, 0, 0, 538, 0, 0,
	0, 34, 0, 589, -2, 0, 0, 0, 49, 0,
	567, 593, 594, 363, 0, 368, 0, 0, 0, 371,
	38, 173, 0, 192, 0, 355, 165, 158, 0, 162,
	138, 162, 0, 0, 67, 0, 76, 77, 0, 0,
	557, 0, 520, 521, 0, 0, 0, 0, 512, 484,
	535, 0, 0, 0, 587, 0, -2, 0, 582, 581,
	358, 37, 0, 0, 0, 0, 391, 172, 174, 0,
	179, 0, 191, 0, 0, 170, 0, 167, 169, 156,
	127, 128, 142, 145, 0, 0, 0, 0, 28, 0,
	0, 479, 481, 480, 482, 0, 0, 0, 501, 502,
	0, 577, 29, 0, 364, 392, 393, 394, 354, 175,
	176, 0, 180, 178, 0, 356, 88, 0, 166, 168,
	0, 240, 0, 78, 79, 72, 558, 556, 483, 0,
	0, 0, 585, -2, 583, 177, 0, 171, 239, 0,
	0, 75, 513, 0, 516, 0, 241, 0, 226, 514,
	0, 0, 0, 195, 0, 0, 196, 197, 0, 0,
	515, 198, 0, 0, 0, 0, 0, 199, 201, 202,
	0, 0, 200, 242, 243, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 269,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:348
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:354
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:362
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:366
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:372
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:379
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:406
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:418
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:472
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:487
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:491
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:567
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:578
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:600
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:615
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:637
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:643
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:657
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:661
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:667
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:672
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:686
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:708
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:913
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:918
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:922
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:927
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:931
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:939
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:949
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:957
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:976
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:989
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:998
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1007
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1016
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1020
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1042
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1046
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1063
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1067
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1077
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1108
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1149
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1153
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1163
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1179
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1186
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1190
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1194
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1198
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1204
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1210
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1216
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1224
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1228
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1245
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1281
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1285
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1289
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1293
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1298
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1311
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1371
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1377
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1387
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 243:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1391
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1403
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1407
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1415
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 248:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1423
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1428
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1461
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1531
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1535
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1540
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1558
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1618
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1622
		{
			yyVAL.str = "full "
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1646
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1652
		{
			yyVAL.showFilter = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.str = SessionStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.str = GlobalStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Begin{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &Commit{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Rollback{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1732
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1746
		{
			setAllowComments(yylex, true)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1756
		{
			yyVAL.bytes2 = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1766
		{
			yyVAL.str = UnionStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = UnionAllStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = UnionDistinctStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1779
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = SQLCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1792
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.str = DistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1801
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = StraightJoinHint
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1810
		{
			yyVAL.selectExprs = nil
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1842
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1847
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1867
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1871
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1915
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1948
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1952
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1966
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1968
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1972
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1974
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1980
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.empty = struct{}{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1988
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = JoinStr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = StraightJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = LeftJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = RightJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = NaturalJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2065
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2075
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2081
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2086
		{
			yyVAL.indexHints = nil
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2090
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2094
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2098
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2143
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2171
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = IsNullStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = IsNotNullStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.str = IsTrueStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.str = IsNotTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.str = IsFalseStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = IsNotFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = EqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = LessThanStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = GreaterThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2243
		{
			yyVAL.str = LessEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = GreaterEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = NotEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2270
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2586
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2632
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2636
		{
			yyVAL.str = BooleanModeStr
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2640
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 515:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2644
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = QueryExpansionStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2719
		{
			yyVAL.expr = nil
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2728
		{
			yyVAL.str = string("")
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2748
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2763
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2767
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2771
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = &NullVal{}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2829
		{
			yyVAL.exprs = nil
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2833
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2847
		{
			yyVAL.orderBy = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2851
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2872
		{
			yyVAL.str = AscScr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.str = AscScr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.str = DescScr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2885
		{
			yyVAL.limit = nil
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2889
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2893
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2897
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = ""
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = ForUpdateStr
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2910
		{
			yyVAL.str = ShareModeStr
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2923
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2931
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2936
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2940
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2944
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2959
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2963
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2968
		{
			yyVAL.updateExprs = nil
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2972
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2982
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2992
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3024
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3040
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3044
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.bytes = []byte("charset")
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &Default{}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3083
		{
			yyVAL.byt = 0
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.byt = 1
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3088
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3090
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3093
		{
			yyVAL.str = ""
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3095
		{
			yyVAL.str = IgnoreStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3107
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3115
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3124
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3140
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3419
		{
			decNesting(yylex)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			skipToEnd(yylex)
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3429
		{
			skipToEnd(yylex)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3433
		{
			skipToEnd(yylex)
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3437
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
