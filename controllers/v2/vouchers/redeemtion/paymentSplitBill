package redeemtion

import (
	"errors"
	"fmt"
	"net/http"
	"ottopoint-purchase/constants"
	"ottopoint-purchase/controllers"
	"ottopoint-purchase/db"
	redishost "ottopoint-purchase/hosts/redis_token/host"
	"ottopoint-purchase/models"
	"ottopoint-purchase/utils"

	"github.com/astaxie/beego/logs"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

type PaymentSplitBillController struct{}

func (controller *PaymentSplitBillController) PaymentSplitBill(ctx *gin.Context) {

	ctrlName := "[PaymentSplitBillController]"

	req := models.PaymentSplitBillReq{}
	res := models.Response{}

	printError := "\033[31m" // merah
	// printSuccess := "\033[32m" // hijau
	printRes := "\033[34m" // biru

	fmt.Println(printRes, ctrlName)

	if err := ctx.ShouldBindJSON(&req); err != nil {

		fmt.Println(printError, "[PackageRedeemtion]-[PaymentSplitBill]")
		fmt.Println(printError, fmt.Sprintf("[ShouldBindJSON]-[Invalid Request : %v]", err))

		message := "Gagal! Maaf transaksi Anda tidak dapat dilakukan saat ini. Silahkan dicoba lagi atau hubungi tim kami untuk informasi selengkapnya."
		res = utils.GetMessageFailedErrorNew(res, 03, message)
		ctx.JSON(http.StatusOK, res)
		return
	}

	// validate request
	_, resultValidate := controllers.ValidateRequest(ctx, true, req, true)
	if !resultValidate.Meta.Status {

		fmt.Println(printError, "[PackageRedeemtion]-[PaymentSplitBill]")
		fmt.Println(printError, fmt.Sprintf("[ValidateRequest]-[Res : %v]", resultValidate))

		ctx.JSON(http.StatusOK, resultValidate)
		return
	}

	// get customer di redis
	dataToken, errToken := redishost.CheckToken(header)
	if errToken != nil {
		fmt.Println("Failed Get Token .. ..")
		res = utils.GetMessageFailedErrorNew(res, 500, "Internal Server Error")
		go sugarLogger.Error("Internal Server Error Get token Customer to redis", zap.Error(errToken))
		ctx.JSON(http.StatusOK, res)
		return
	}

	// check user
	dataUser, errUser := db.UserWithInstitution(dataToken.Data, header.InstitutionID)
	if errUser != nil || dataUser.CustID == "" {
		logs.Info("Internal Server Error : ", errUser)
		sugarLogger.Info("Customer not found")
		res = utils.GetMessageResponse(res, 404, false, errors.New("User belum Eligible"))
		ctx.JSON(http.StatusOK, res)
		return
	}

	param := ParamRedeemtion(req.CampaignId, dataToken.Data)

	param.AccountNumber = dataToken.Data
	param.MerchantID = dataUser.MerchantID

	res = services.PaymentSplitBillServices(req, param)

	ctx.JSON(http.StatusOK, res)

}

func ParamRedeemtion(campaignId, custId string) models.Params {

	param := models.Params{}

	// Check voucher / get details voucher
	cekVoucher, errVoucher := db.GetVoucherDetails(campaignId)
	if errVoucher != nil || cekVoucher.RewardID == "" {
		sugarLogger.Info(fmt.Sprintf("Failed Get Voucher/Reward Details : ", errVoucher))
		res = utils.GetMessageResponse(res, 404, false, errors.New("Voucher Not Found"))
		ctx.JSON(http.StatusOK, res)
		return
	}

	dataVouch := SwitchDataVoucher(cekVoucher)

	if dataVouch.Category == constants.CategoryVidio {
		req.CustID = "0"
	}

	if dataVouch.SupplierID == constants.CODE_VENDOR_OTTOAG {
		validateVerfix := controllers.ValidatePerfix(custId, dataVouch.ProductCode, dataVouch.Category)
		if validateVerfix == false {
			fmt.Println("Invalid verfix")
			res = utils.GetMessageResponse(res, 500, false, errors.New("Nomor akun ini tidak terdafatr"))
			ctx.JSON(http.StatusOK, res)
			return
		}
		if dataVouch.Category == "" {
			fmt.Println("Invalid Category")
			res = utils.GetMessageResponse(res, 500, false, errors.New("Invalid BrandName"))
			ctx.JSON(http.StatusOK, res)
			return
		}
	}

	param = models.Params{
		// AccountNumber:       dataToken.Data,
		// MerchantID:          dataUser.MerchantID,
		InstitutionID:       header.InstitutionID,
		AccountId:           custId,
		CampaignID:          campaignId,
		SupplierID:          dataVouch.SupplierID,
		ProductType:         dataVouch.ProductType,
		ProductCode:         dataVouch.ProductCode,
		CouponCode:          dataVouch.CouponCode,
		NamaVoucher:         dataVouch.NamaVoucher,
		Point:               dataVouch.Point,
		Category:            dataVouch.Category,
		UsageLimitVoucher:   dataVouch.UsageLimitVoucher,
		ProductCodeInternal: dataVouch.ProductCodeInternal,
		ProductID:           cekVoucher.ProductID,
		CategoryID:          dataVouch.CategoryID,
		RewardID:            dataVouch.RewardID,
		ExpDate:             dataVouch.ExpDate,
	}

	return param
}
